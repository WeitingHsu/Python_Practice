'''
Method overloading:
same method but with different argument(object)




Method overriding:
two methods with same name and same number of parameter




'''

'''Method overloading'''

class student:

    def __init__(self,m1,m2):
        self.m1 = m1
        self.m2 = m2

    # Here, we originally have sum this method(function), but this cann't be used to add our object(instance) 
    # which generated by student template. Therefore, we create the same function but pass different
    # type of arguement(here, it's student-based object). It's like operator overloading
    # Different from operator loading, it overload the method(function), but  operator.

    def sum(self,a=None,b=None,c=None):
        
        if a!=None and b!=None and c!=None:
            return a+b+c
        elif a!=None and b!=None:
            return a+b
        else:
            return a

s1 = student(58,69)

print(s1.sum(5,6))


'''Method overriding'''


class A:

    # Two methods with same name same arguement but different 

    def show(self):
        print("in A show")

class B(A):
    def show(self):
        print("in B show")


a1 = A()
a2 = B()

a1.show()
a2.show()